"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[429],{35796:function(t,e,i){i.d(e,{d:function(){return a}});var n=i(4942),s=i(45624);class a extends s.J5{constructor(t){super(),(0,n.Z)(this,"clientId",void 0),this.clientId=t.clientId}async authenticateUser(){var t;if(!this.provider||null===(t=this.chainConfig)||void 0===t||!t.chainId)throw s.RM.notConnectedError();const{chainNamespace:e,chainId:i}=this.chainConfig;if(this.status!==s.MP.CONNECTED)throw s.RM.notConnectedError("Not connected with wallet, Please login/connect first");const n=await this.provider.request({method:"eth_accounts"});if(n&&n.length>0){const t=(0,s.Cb)(n[0],this.name);if(t){if(!(0,s.$E)(t))return{idToken:t}}const a={domain:window.location.origin,uri:window.location.href,address:n[0],chainId:parseInt(i,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:(new Date).toISOString()},r=await(0,s.tV)(a,e),o=await this.provider.request({method:"personal_sign",params:[r,n[0]]}),h=await(0,s.rn)(e,o,r,this.name,this.sessionTime,this.clientId);return(0,s.Fr)(n[0],this.name,h),{idToken:h}}throw s.RM.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnect(){if(this.status!==s.MP.CONNECTED)throw s.RM.disconnectionError("Not connected with wallet");const t=await this.provider.request({method:"eth_accounts"});t&&t.length>0&&(0,s.qz)(t[0],this.name)}}},94429:function(t,e,i){i.r(e),i.d(e,{MetamaskAdapter:function(){return h}});var n=i(4942),s=i(92003),a=i.n(s),r=i(45624),o=i(35796);class h extends o.d{constructor(t){super(t),(0,n.Z)(this,"adapterNamespace",r.yk.EIP155),(0,n.Z)(this,"currentChainNamespace",r.EN.EIP155),(0,n.Z)(this,"type",r.hN.EXTERNAL),(0,n.Z)(this,"name",r.rW.METAMASK),(0,n.Z)(this,"status",r.MP.NOT_READY),(0,n.Z)(this,"rehydrated",!1),(0,n.Z)(this,"metamaskProvider",null),this.chainConfig=(null===t||void 0===t?void 0:t.chainConfig)||null,this.sessionTime=(null===t||void 0===t?void 0:t.sessionTime)||86400}get provider(){return this.status===r.MP.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}async init(t){if(super.checkInitializationRequirements(),this.metamaskProvider=await a()({mustBeMetaMask:!0}),!this.metamaskProvider)throw r.Ty.notInstalled("Metamask extension is not installed");this.status=r.MP.READY,this.emit(r.n2.READY,r.rW.METAMASK);try{r.cM.debug("initializing metamask adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(e){this.emit(r.n2.ERRORED,e)}}setAdapterSettings(t){this.status!==r.MP.READY&&(null!==t&&void 0!==t&&t.sessionTime&&(this.sessionTime=t.sessionTime),null!==t&&void 0!==t&&t.clientId&&(this.clientId=t.clientId))}async connect(){if(super.checkConnectionRequirements(),this.chainConfig||(this.chainConfig=(0,r.h2)(r.EN.EIP155,1)),this.status=r.MP.CONNECTING,this.emit(r.n2.CONNECTING,{adapter:r.rW.METAMASK}),!this.metamaskProvider)throw r.RM.notConnectedError("Not able to connect with metamask");try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=this.metamaskProvider;if(t!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=r.MP.CONNECTED,!this.provider)throw r.RM.notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",(()=>{this.disconnect()})),this.emit(r.n2.CONNECTED,{adapter:r.rW.METAMASK,reconnected:this.rehydrated}),this.provider}catch(t){throw this.status=r.MP.READY,this.rehydrated=!1,this.emit(r.n2.ERRORED,t),r.RM.connectionError("Failed to login with metamask wallet")}}async disconnect(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnect(),null===(t=this.provider)||void 0===t||t.removeAllListeners(),e.cleanup?(this.status=r.MP.NOT_READY,this.metamaskProvider=null):this.status=r.MP.READY,this.rehydrated=!1,this.emit(r.n2.DISCONNECTED)}async getUserInfo(){if(this.status!==r.MP.CONNECTED)throw r.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(t){if(!this.metamaskProvider)throw r.RM.notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(e){if(4902!==e.code)throw e;await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget]}]})}}}}}]);